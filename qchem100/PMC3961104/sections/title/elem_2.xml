<?xml version="1.0" encoding="UTF-8"?>
<sec class="sec">
 <div class="title" xmlns="http://www.w3.org/1999/xhtml">Functionality and Usage</div>
 <p xmlns="http://www.w3.org/1999/xhtml">The functionality to create a peptide is implemented in the 
  <span class="monospace">Peptide</span> class which is imported from the 
  <span class="monospace">fragbuilder</span> module. A typical work flow creates a peptide, defines torsion angles, performs a constrained geometry optimization and finally writes the resulting structure to a file. A chart describing a typical use case is displayed in 
  <a ref-type="fig" rid="fig-1" href="#fig-1">Fig. 1</a>, and detailed examples of the functionality of FragBuilder are given below.
 </p>
 <div id="fig-1" orientation="portrait" position="float" class="fig" xmlns="http://www.w3.org/1999/xhtml">
  <span pub-id-type="doi" class="object-id">10.7717/peerj.277/fig-1</span>
  <span class="label">Figure 1</span>
  <div class="caption">
   <div class="title">Flowchart describing the use of FragBuilder.</div>
   <p>Simple chart of a common workflow using FragBuilder. First a peptide is generated from the sequence. Then torsion angles are set — either specified manually or sampled through BASILISK and a quick geometry optimization is performed using the MMFF94 force field. Finally, the structure is written to a file.</p>
  </div>
  <div xlink:href="peerj-02-277-g001" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
 </div>
 <p xmlns="http://www.w3.org/1999/xhtml">Furthermore FragBuilder has classes to easily access the BASILISK library, read PDB files and write input files for Gaussian 09. An overview of the available class as well as a brief description of each can be found in 
  <a ref-type="table" rid="table-1" href="#table-1">Table 1</a>.
 </p>
 <div id="table-1" orientation="portrait" position="float" class="table-wrap" xmlns="http://www.w3.org/1999/xhtml">
  <span pub-id-type="doi" class="object-id">10.7717/peerj.277/table-1</span>
  <span class="label">Table 1</span>
  <div class="caption">
   <div class="title">Overview of classes included in the FragBuilder library.</div>
  </div>
  <div class="alternatives">
   <div xlink:href="peerj-02-277-g007" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
   <table frame="hsides" rules="groups">
    <colgroup span="1">
     <col span="1"/>
     <col align="justify" span="1"/>
    </colgroup>
    <thead>
     <tr>
      <th rowspan="1" colspan="1">Class name</th>
      <th style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Description</th>
     </tr>
    </thead>
    <tbody>
     <tr>
      <td rowspan="1" colspan="1">
       <span class="monospace">Peptide</span>
      </td>
      <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Class to create and manipulate a peptide structure and write output files</td>
     </tr>
     <tr>
      <td rowspan="1" colspan="1">
       <span class="monospace">Basilisk_DBN</span>
      </td>
      <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Wrapper class for direct access to the BASILISK library</td>
     </tr>
     <tr>
      <td rowspan="1" colspan="1">
       <span class="monospace">PDB</span>
      </td>
      <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Class to extract angles, sequence, etc. from a PDB file</td>
     </tr>
     <tr>
      <td rowspan="1" colspan="1">
       <span class="monospace">G09_opt</span>, 
       <span class="monospace">G09_NMR</span>, 
       <span class="monospace">G09_energy</span>
      </td>
      <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Classes to create input files for QM calculations in Gaussian 09</td>
     </tr>
    </tbody>
   </table>
  </div>
 </div>
 <sec class="sec">
  <div class="title" xmlns="http://www.w3.org/1999/xhtml">Creating peptides</div>
  <p xmlns="http://www.w3.org/1999/xhtml">The structure of a peptide molecule is generated as a Python object by using the 
   <span class="monospace">Peptide</span> class instantiated with the sequence as argument. The 
   <span class="monospace">Peptide</span> class has access to classes for each type of residues which each contain a structure for that residue in XYZ format. Routines from Open Babel are then used to automatically rotate, translate, and connect the residues. Finally the structure is stored in the 
   <span class="monospace">Peptide.molecule</span> class variable as an Open Babel 
   <span class="monospace">OBMol</span> object.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">The sequence interpreted uses the single letter abbreviation for each amino acid. E.g., 
   <span class="monospace">Peptide("GLG")</span> will create a glycine–leucine–glycine tripeptide molecule which can then be manipulated through the interface. The minimal code to achieve this could be:
  </p>
  <span class="preformat" xmlns="http://www.w3.org/1999/xhtml">from fragbuilder import Peptide pep = Peptide("GLG")</span>
  <p xmlns="http://www.w3.org/1999/xhtml">As default values, the 
   <span class="italic">ϕ</span>, 
   <span class="italic">ψ</span> and 
   <span class="italic">ω</span> backbone torsion angles are set to −120°, 140° and −180°, which corresponds to a typical extended 
   <span class="italic">β</span>-strand. The side chain torsion 
   <span class="italic">χ</span> angles are set so two neighboring side chains will not have steric clashes when no side chain torsion angle input is given. After the peptide has been instantiated, the structure can be manipulated through built-in methods. Several convenient methods of the 
   <span class="monospace">Peptide</span> class are presented in the next sections. An overview of some of the basic methods of the 
   <span class="monospace">Peptide</span> class can be seen in 
   <a ref-type="table" rid="table-2" href="#table-2">Table 2</a>.
  </p>
  <div id="table-2" orientation="portrait" position="float" class="table-wrap" xmlns="http://www.w3.org/1999/xhtml">
   <span pub-id-type="doi" class="object-id">10.7717/peerj.277/table-2</span>
   <span class="label">Table 2</span>
   <div class="caption">
    <div class="title">Overview of the basic methods in the 
     <span class="monospace">Peptide</span> class.
    </div>
    <p>See the text for detailed descriptions of each method.</p>
   </div>
   <div class="alternatives">
    <div xlink:href="peerj-02-277-g008" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
    <table frame="hsides" rules="groups">
     <colgroup span="1">
      <col span="1"/>
      <col align="justify" span="1"/>
     </colgroup>
     <thead>
      <tr>
       <th rowspan="1" colspan="1">Method name</th>
       <th style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Description</th>
      </tr>
     </thead>
     <tbody>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">set_bb_angles</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Set the backbone 
        <span class="italic">ϕ</span>/
        <span class="italic">ψ</span>-angles for a residue
       </td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">set_chi_angles</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Set the side chain 
        <span class="italic">χ</span>-angles for a residue
       </td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">get_bb_angles</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Read the backbone 
        <span class="italic">ϕ</span>/
        <span class="italic">ψ</span>-angles for a residue
       </td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">get_chi_angles</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Read the side chain 
        <span class="italic">χ</span>-angles for a residue
       </td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">sample_bb_angles</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Sample the backbone 
        <span class="italic">ϕ</span>/
        <span class="italic">ψ</span>-angles for a residue using the BASILISK library
       </td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">sample_chi_angles</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Sample the side chain 
        <span class="italic">χ</span>-angles for a residue using the BASILISK library
       </td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">optimize</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Perform a molecular mechanics optimization using the MMFF94 force field</td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">regularize</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Perform the regularization procedure to remove steric clashes</td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">write_pdb</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Write the peptide structure to a PDB file</td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">write_xyz</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Write the peptide structure to an XYZ file</td>
      </tr>
      <tr>
       <td rowspan="1" colspan="1">
        <span class="monospace">write_file</span>
       </td>
       <td style="text-align:left;white-space:normal;" rowspan="1" colspan="1">Write the peptide structure to one of the nearly 100 file types supported by Open Babel</td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
 </sec>
 <sec class="sec">
  <div class="title" xmlns="http://www.w3.org/1999/xhtml">Setting dihedral angles</div>
  <p xmlns="http://www.w3.org/1999/xhtml">The 
   <span class="monospace">Peptide</span> class allows for dihedral angles to be manually specified through setter and getter type functions that set or read backbone and side chain torsion angles. Examples of torsion angles that can be set in FragBuilder are shown in 
   <a ref-type="fig" rid="fig-2" href="#fig-2">Fig. 2</a>.
  </p>
  <div id="fig-2" orientation="portrait" position="float" class="fig" xmlns="http://www.w3.org/1999/xhtml">
   <span pub-id-type="doi" class="object-id">10.7717/peerj.277/fig-2</span>
   <span class="label">Figure 2</span>
   <div class="caption">
    <div class="title">Torsion angles that can be treated by FragBuilder.</div>
    <p>Examples of dihedral angles that can be set via FragBuilder. In (A) the backbone 
     <span class="italic">ω</span>, 
     <span class="italic">ϕ</span> and 
     <span class="italic">ψ</span> torsion angles are shown for the 
     <span class="italic">i</span>’th alanine residue of a peptide strand. In (B), the 
     <span class="italic">χ</span>
     <sub>1</sub> torsion angle is shown for a valine side chain.
    </p>
   </div>
   <div xlink:href="peerj-02-277-g002" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </div>
  <p xmlns="http://www.w3.org/1999/xhtml">For example, making a glycine–leucine–glycine peptide and setting the backbone angles to 
   <span class="italic">ϕ</span> = −60.0° and 
   <span class="italic">ψ</span> = −30.0°, and side chain angles to 
   <span class="italic">χ</span>
   <sub>1</sub> = 180° and 
   <span class="italic">χ</span>
   <sub>2</sub> = 60° of the leucine (residue 2) can be done through the following code:
  </p>
  <span class="preformat" xmlns="http://www.w3.org/1999/xhtml">pep = Peptide("GLG") pep.set_bb_angles(2, [-60.0, -30.0]) pep.set_chi_angles(2, [180.0, 60.0])</span>
  <p xmlns="http://www.w3.org/1999/xhtml">This way it is possible to precisely specify dihedral angles manually. This code can be used, for instance, to set up a scan of torsion angles or making peptides with geometries extracted from experimental structures. An example of a scan is shown in 
   <a ref-type="fig" rid="fig-3" href="#fig-3">Fig. 3</a>. This scan was created in the following manner:
  </p>
  <span class="preformat" xmlns="http://www.w3.org/1999/xhtml">pep = Peptide("GLG") for i in range(10): pep.set_bb_angles(2, [-120.0, 100.0+20.0*i]) pep.write_xyz("pep_%i.xyz" % (i))</span>
  <p xmlns="http://www.w3.org/1999/xhtml">The method 
   <span class="monospace">Peptide.write_xyz()</span> writes the structure to a file in XYZ format and is described later in this section.
  </p>
  <div id="fig-3" orientation="portrait" position="float" class="fig" xmlns="http://www.w3.org/1999/xhtml">
   <span pub-id-type="doi" class="object-id">10.7717/peerj.277/fig-3</span>
   <span class="label">Figure 3</span>
   <div class="caption">
    <div class="title">Example of four different conformers of a glycine–alanine–glycine tri-peptide.</div>
    <p>Generated from a scan over the 
     <span class="italic">ψ</span> backbone torsion angle of the alanine residue.
    </p>
   </div>
   <div xlink:href="peerj-02-277-g003" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </div>
 </sec>
 <sec class="sec">
  <div class="title" xmlns="http://www.w3.org/1999/xhtml">Sampling dihedral angles from BASILISK</div>
  <p xmlns="http://www.w3.org/1999/xhtml">In addition to manual specification of torsion angle values, it is possible to set these to values from predefined distributions, such as the Ramachandran-plot for backbone angles or rotamer distributions for side chain angles. This allows for fast and efficient sampling of realistic peptide conformations and rotamer distribution without the need for a molecular dynamics or Monte Carlo simulation. For this purpose FragBuilder includes the BASILISK library and convenient methods to access BASILISK from the 
   <span class="monospace">Peptide</span> class.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">BASILISK is a dynamic Bayesian network trained on a large set of representative structures from the Protein Data Bank (
   <a rid="ref-1" ref-type="bibr" href="#ref-1">Berman et al., 2000</a>) and is able to sample backbone angles and side chain angles. BASILISK makes use of directional statistics — the statistics of angles, orientations and directions — to formulate a well-defined joint probability distribution over side and main chain angles. Backbone angles are essentially sampled from the Ramachandran-plot via BASILISK. Similarly, side chain angles are sampled from corresponding rotamer distributions. The distributions offered by the BASILISK library are continuous, in contrast to most approaches based on discrete rotamer libraries. BASILISK can sample side chain angles either in a backbone conformation-dependent mode or -independent mode (where backbone dependency is the default behavior). The random seed can be set explicitly via the 
   <span class="monospace">fragbuilder.set_seed()</span> function. If no seed is supplied the seeding will be random.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">The methods 
   <span class="monospace">Peptide.sample_bb_angles()</span> and 
   <span class="monospace">Peptide.sample_bb_angles()</span> allows the user to simultaneously sample and set the torsion angles of a residue. The methods return the new sets of sampled angles so they are known to the user directly.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">The following code will create a glycine–leucine–glycine peptide and set the backbone and side chain angles of the second residue (leucine) to values that are sampled from BASILISK. The values of the sampled angles are stored in the 
   <span class="monospace">new_bb</span> and 
   <span class="monospace">new_chi</span> variables.
  </p>
  <span class="preformat" xmlns="http://www.w3.org/1999/xhtml">from fragbuilder import Peptide, set_seed set_seed(42) pep = Peptide("GLG") new_bb = pep.sample_bb_angles(2) new_chi = pep.sample_chi_angles(2)</span>
  <p xmlns="http://www.w3.org/1999/xhtml">It is also possible to get samples from BASILISK via FragBuilder by using the 
   <span class="monospace">fragbuilder.Basilisk_DBN</span> class which provides direct access to the sampler in the BASILISK library. This class is used to obtain samples of 
   <span class="italic">ϕ</span>/
   <span class="italic">ψ</span> angles from the Ramachandran-plot or sets of 
   <span class="italic">χ</span> angles from rotamer distribution without first creating a peptide.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">For instance, a random set of 
   <span class="italic">χ</span> angles (
   <span class="monospace">chi</span>), 
   <span class="italic">ϕ</span>/
   <span class="italic">ψ</span> angles (
   <span class="monospace">bb</span>), and their corresponding log-likelihood (
   <span class="monospace">ll</span>) in the probability distribution can be obtained as follows (here for a Leucine (“L”) residue):
  </p>
  <div class="preformat" xmlns="http://www.w3.org/1999/xhtml">from fragbuilder import Basilisk_DBN dbn = Basilisk_DBN() # 
   <span class="italic">Amino acid type as argument</span> chi, bb, ll = dbn.get_sample("L")
  </div>
  <p xmlns="http://www.w3.org/1999/xhtml">10,000 of such samples from the above code was used to create the Ramachandran plot and rotamer distribution of leucine which can be seen in 
   <a ref-type="fig" rid="fig-5" href="#fig-5">Figs. 5A</a> and 
   <a ref-type="fig" rid="fig-5" href="#fig-5">5B</a>, respectively.
  </p>
  <div id="fig-4" orientation="portrait" position="float" class="fig" xmlns="http://www.w3.org/1999/xhtml">
   <span pub-id-type="doi" class="object-id">10.7717/peerj.277/fig-4</span>
   <span class="label">Figure 4</span>
   <div class="caption">
    <div class="title">Overview of the available peptide-capping schemes available in FragBuilder.</div>
    <p>All three examples show an alanine residue (shown between a set of gray lines). In (A), the caps are the N- and C-termini in their charged states. In (B) the caps are the N- and C-termini in their neutral states. In (C) the caps are methyl groups. Caps can be mixed and matched according to the user’s specifications.</p>
   </div>
   <div xlink:href="peerj-02-277-g004" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </div>
 </sec>
 <sec class="sec">
  <div class="title" xmlns="http://www.w3.org/1999/xhtml">Capping peptides</div>
  <p xmlns="http://www.w3.org/1999/xhtml">One aspect of carrying out quantum mechanical calculations on peptide fragments is the way the peptide strands are terminated or capped. This can be important, since the properties calculated from a quantum mechanical calculation may be affected by how the protein is truncated to a model peptide. The specific type of cap is controlled by setting the keywords 
   <span class="monospace">nterm</span> and 
   <span class="monospace">cterm</span> keywords (for the N-terminus and C-terminus, respectively) when the peptide object is created.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">By default, FragBuilder generates methyl caps by adding a CH
   <sub>3</sub>–C(=O)- group to the N-terminus and an -NH–CH
   <sub>3</sub> group to the C-terminus (i.e., if the keywords are not set). This corresponds to setting both keywords (
   <span class="monospace">nterm</span> and 
   <span class="monospace">cterm</span>) to 
   <span class="monospace">"methyl"</span>. Additionally, it is possible to cap the ends of the peptide as normal N- and C-termini (amine or carboxyl groups, respectively) which can be set to either a charged or a neutral state. A charged or neutral terminus is specified by passing the values 
   <span class="monospace">"charged"</span> or 
   <span class="monospace">"neutral"</span>, respectively. See 
   <a ref-type="fig" rid="fig-4" href="#fig-4">Fig. 4</a> for a schematic of the three possible types of caps.
  </p>
  <div id="fig-5" orientation="portrait" position="float" class="fig" xmlns="http://www.w3.org/1999/xhtml">
   <span pub-id-type="doi" class="object-id">10.7717/peerj.277/fig-5</span>
   <span class="label">Figure 5</span>
   <div class="caption">
    <div class="title">Examples of sampling dihedral angles through BASILISK in FragBuilder.</div>
    <p>10,000 samples from BASILISK are shown for a leucine residue. (
     <span class="italic">ϕ</span>, 
     <span class="italic">ψ</span>) backbone torsion angle pairs are shown in (A) and (
     <span class="italic">χ</span>
     <sub>1</sub>, 
     <span class="italic">χ</span>
     <sub>2</sub>) side chain torsion angle pairs are shown in (B).
    </p>
   </div>
   <div xlink:href="peerj-02-277-g005" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </div>
  <p xmlns="http://www.w3.org/1999/xhtml">For instance, a glycine–leucine–glycine residue with a positively charged N-terminus and a neutral C-terminus is generated by the following code:</p>
  <span class="preformat" xmlns="http://www.w3.org/1999/xhtml">pep = Peptide("GLG", nterm="charged", cterm="neutral")</span>
 </sec>
 <sec class="sec">
  <div class="title" xmlns="http://www.w3.org/1999/xhtml">Optimization</div>
  <p xmlns="http://www.w3.org/1999/xhtml">When generating peptides with a specific set of dihedral angles the structure may, in some cases, contain steric clashes. We found this prevented us from starting quantum mechanical geometry optimization on the structures, even when these were generated to match angles from experimental structures. Typical problems with these structures were SCF convergence issues and very large molecular gradients which cause the program to fail. In some cases, problems with large molecular gradients may be alleviated by adjusting the step-size in the optimizer, but this must be investigated on a case-to-case basis. It is therefore advantageous to remove steric clashes before any quantum mechanical calculation is carried out.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">For the reasons mentioned above, FragBuilder offers specialized molecular mechanics optimization routines, specifically designed to constrain the dihedral angles of peptides while removing steric clashes. Optimization is performed through Open Babel which provides access to several force fields and a number of optimizers. The MMFF94 force field (
   <a rid="ref-5" ref-type="bibr" href="#ref-5">Halgren, 1996</a>) is arguably the most advanced force field for biomolecules in Open Babel and is used exclusively in FragBuilder along with the conjugate gradient method. FragBuilder offers three kinds of optimization methods in the 
   <span class="monospace">Peptide</span> class.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">The method 
   <span class="monospace">Peptide.optimize()</span> will perform a conjugate gradient optimization of the peptide with no restraints, until the default convergence criterion of Open Babel is reached (Δ
   <span class="italic">E</span> &lt; 1.0 × 10
   <span class="sup">−6</span> kcal/mol or a max of 500 steps). Another option is to impose harmonic constraints on all dihedral angles. This is achieved through an extra keyword, i.e., 
   <span class="monospace">Peptide.optimize(constraint=True)</span>. This will perform a conjugate gradient minimization through Open Babel with harmonic potentials on 
   <span class="italic">ϕ</span>, 
   <span class="italic">ψ</span> and 
   <span class="italic">ω</span> backbone angles as well as all side chain 
   <span class="italic">χ</span> angles.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">A harmonic potential does not keep torsion angles completely fixed during optimization, and after convergence they deviate slightly from the starting values. For situations where this is problematic, FragBuilder is offering a routine termed “regularizing” which is accessed via the 
   <span class="monospace">Peptide.regularize()</span> method.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">Regularizing cycles between a few constrained geometry optimization steps and resetting the dihedral angles to the initially specified angles, until self consistency is reached. A default regularization cycles 10 times between 50 conjugate gradient steps and angle resets. In most cases this converges the constrained optimization to less than 0.002° from the specified dihedral angles, which are then set to the specified values.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">We found our regularization procedure with flexible bond lengths and angles through the MMFF94 force field to allowing convergence of QM calculations in many cases, which would have been hindered by steric clashes due to fixed bond length and angles.</p>
  <p xmlns="http://www.w3.org/1999/xhtml">A similar approach to avoid spurious conformations has been adopted by Vila et al. in the creation of the CheShift chemical shifts predictor, which is parametrized from quantum mechanical calculations on model peptides (
   <a rid="ref-15" ref-type="bibr" href="#ref-15">2009</a>). Here bond angles and lengths are simply set to the standard values of the ECEPP/3 force field (
   <a rid="ref-8" ref-type="bibr" href="#ref-8">Nemethy et al., 1992</a>). Subsequently the internal energy of the peptide is calculated with the ECEPP-05 force field and any conformation with an internal energy &gt;30 kcal/mol is rejected as being unphysical.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">
   <a ref-type="fig" rid="fig-6" href="#fig-6">Figure 6</a> shows an example of a tryptophan–aspartate–glycine peptide with methyl caps in which the backbone torsion angles are taken from the experimental structure of xylanase (PDB-code: 1XNB), residues 99–101. This choice of angles causes a clash between a hydrogen bonding O...H pair, and a geometry optimization at the B3LYP/6-31+G(d,p) level in Gaussian 09 could not start (at default settings) due to an excessively large molecular gradient in the initial geometry. Regularization removes the clash, while retaining the specified dihedral angles, and allows the optimization to proceed.
  </p>
  <div id="fig-6" orientation="portrait" position="float" class="fig" xmlns="http://www.w3.org/1999/xhtml">
   <span pub-id-type="doi" class="object-id">10.7717/peerj.277/fig-6</span>
   <span class="label">Figure 6</span>
   <div class="caption">
    <div class="title">Removing clashes by regularization in a tryptophan–apartate–glycine peptide.</div>
    <p>In (A) the peptide clashes between the amide proton on the C-terminal methyl cap and the amide oxygen in residue 1. In (B) this clash has been removed by constrained relaxation during the regularization procedure. Both structures have identical 
     <span class="italic">ϕ</span>, 
     <span class="italic">ψ</span> and 
     <span class="italic">ω</span> backbone torsion angles.
    </p>
   </div>
   <div xlink:href="peerj-02-277-g006" class="graphic" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </div>
  <p xmlns="http://www.w3.org/1999/xhtml">A peptide can be created and regularized using the following code, which also prints the MMFF94 force field energy in units of kcal/mol:</p>
  <div class="preformat" xmlns="http://www.w3.org/1999/xhtml">pep = Peptide(sequence) # 
   <span class="italic">The user can manipulate the structure here</span> pep.regularize() print pep.get_energy()
  </div>
 </sec>
 <sec class="sec">
  <div class="title" xmlns="http://www.w3.org/1999/xhtml">Reading PDB files</div>
  <p xmlns="http://www.w3.org/1999/xhtml">While sampling and conformational scanning, etc., are efficient ways to generate new peptide conformations, it can be necessary to extract information about the conformation of a specific protein structure, usually given in PDB format. FragBuilder implements functionality to extract information about the amino acid sequence and dihedral angles from a structure in a PDB formatted file, which can then be stored or passed on in the program, for instance to methods in the 
   <span class="monospace">Peptide</span> class. This is carried out via the 
   <span class="monospace">fragbuilder.PDB</span> class which creates an object from a PDB file and offers methods to read the relevant information.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">The following code example illustrates the basic usage of the 
   <span class="monospace">fragbuilder.PDB</span> module, and will print the amino acid type and dihedral angles of residue number 10 in the PDB file 
   <span class="monospace">"structure.pdb"</span>:
  </p>
  <div class="preformat" xmlns="http://www.w3.org/1999/xhtml">from fragbuilder import PDB pdbfile = PDB("structure.pdb") i = 10 # 
   <span class="italic">Residue number 10 in this example</span> print pdbfile.get_resname(i) print pdbfile.get_bb_angles(i) print pdbfile.get_chi_angles(i)
  </div>
 </sec>
 <sec class="sec">
  <div class="title" xmlns="http://www.w3.org/1999/xhtml">File output and interface to QM programs</div>
  <p xmlns="http://www.w3.org/1999/xhtml">Open Babel provides very flexible file readers and writers. The 
   <span class="monospace">Peptide</span> class wraps Open Babel with functions to directly write the geometry of a 
   <span class="monospace">Peptide</span> object to a file in XYZ or PDB format. This can be done simply as:
  </p>
  <span class="preformat" xmlns="http://www.w3.org/1999/xhtml">pep = Peptide(sequence) pep.write_xyz("pep.xyz") pep.write_pdb("pep.pdb")</span>
  <p xmlns="http://www.w3.org/1999/xhtml">It is also possible to write to any of the nearly 100 formats supported in Open Babel by using the method 
   <span class="monospace">Peptide.write_file(filetype, filename)</span> which offers direct access to Open Babel’s 
   <span class="monospace">OBConversion.WriteFile()</span> method. For instance, an input file for the quantum chemistry program GAMESS (
   <a rid="ref-11" ref-type="bibr" href="#ref-11">Schmidt et al., 1993</a>) can be created with the following code:
  </p>
  <span class="preformat" xmlns="http://www.w3.org/1999/xhtml">pep.write_file("gamin", "pep.inp")</span>
  <p xmlns="http://www.w3.org/1999/xhtml">Here, the file type argument follows the Open Babel syntax, where 
   <span class="monospace">"gamin"</span> corresponds to the GAMESS input file format.
  </p>
  <p xmlns="http://www.w3.org/1999/xhtml">FragBuilder additionally offers an interface to write input-files for Gaussian 09, beyond the capabilities of Open Babel. Currently, it is possible to set up geometry optimization, single-point energy calculations and calculation of NMR shielding. An example for a simple workflow that will generate a file for geometry optimization of a peptide in Gaussian 09 at the B3LYP/6-31G(d) level (using the 
   <span class="monospace">fragbulder.G09_opt</span> class) is as follows:
  </p>
  <div class="preformat" xmlns="http://www.w3.org/1999/xhtml">from fragbuilder import Peptide, G09_opt pep = Peptide(sequence) # 
   <span class="italic">The user can manipulate the structure here</span> opt = G09_opt(pep) opt.set_method("B3LYP/6-31G(d)") opt.write_com("pep.com")
  </div>
  <p xmlns="http://www.w3.org/1999/xhtml">If no method or basis set is specified, the file writer defaults to PM6 (
   <a rid="ref-13" ref-type="bibr" href="#ref-13">Stewart, 2007</a>) for geometry optimization. Other classes that interface to Gaussian 09 are the 
   <span class="monospace">fragbuilder.G09_NMR</span> and 
   <span class="monospace">fragbuilder.G09_energy</span> classes, which are imported and instantiated similarly.
  </p>
 </sec>
</sec>
