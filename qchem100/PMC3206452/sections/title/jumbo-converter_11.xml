<?xml version="1.0" encoding="UTF-8"?>
<sec class="sec">
 <div class="title" xmlns="http://www.w3.org/1999/xhtml">JUMBO-Converters</div>
 <p xmlns="http://www.w3.org/1999/xhtml">The JUMBO-Converters are based on a templating approach, matching the observed output to an abstraction of the QC concepts. They have been hand-crafted for a number of well-structured output files (Gaussian archive files, MOPAC and various punchfiles) but the emphasis is now on writing JUMBO-Parsers for the logfiles for each code. We have explored a wide range of technologies for parsing logfiles including machine learning, formal grammars (lex/yacc), ANTLR 
  <span ext-link-type="uri" xlink:href="http://www.antlr.org/" class="ext-link" xmlns:xlink="http://www.w3.org/1999/xlink">http://www.antlr.org/</span>, but all of these have problems when confronted with unexpected output, variations between implementations, error messages and many other irregularities. The JUMBO-Parser will not be described in detail here but in essence consists of the following approach:
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Recognition of common document 
  <span class="italic">fragments </span>in the logfile (
  <span class="italic">e.g</span>., tables of coords, eigenvalues, atomic charges, 
  <span class="italic">etc</span>.) which appear to be produced by record-oriented (FORTRAN format) routines in the source code. We create a 
  <span class="italic">template </span>for each such 
  <span class="italic">chunk</span>, which contains 
  <span class="italic">records</span>, with regexes for each record that we wish to match and from which we will extract information. These templates can be nested, often representing the internal structure of the program (
  <span class="italic">e.g</span>., nested subroutine calls).
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Each template is then used to match any chunks in the document, which are then regarded as completed and unavailable to other templates. The strategy allows for nesting and a small amount of back-tracking.</p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Chunks of document that are not parsed may then be extracted by writing additional parsers, very often to clean up records such as error messages or timing information.</p>
 <p xmlns="http://www.w3.org/1999/xhtml">At the end of this process a good parse will results in a highly-structured document with CML module providing the structure and CML scalar, array and matrix providing the individual fields 
  <span ext-link-type="uri" xlink:href="http://quixote.wikispot.org/Tutorials_and_problems" class="ext-link" xmlns:xlink="http://www.w3.org/1999/xlink">http://quixote.wikispot.org/Tutorials_and_problems</span>.
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">This document is rarely fit for purpose in Quixote or other CML conventions and a second phase of transformation is applied. This carries out the following:</p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Removal of unwanted fields.</p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Removal of unnecessary hierarchy (often an artifact of the parsing strategy)</p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Addition of 
  <span class="monospace">dictRefs</span> to existing dictionaries
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Addition of units (often not explicitly mentioned in the logfile but known to the parser writer)</p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Grouping of sibling elements into a more tractable structure (unflattening)</p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Annotation of modules to reflect semantic purpose, 
  <span class="italic">e.g</span>., initial coordinates, optimizations, 
  <span class="italic">etc</span>.
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">• Re-structuring of the modules in the parsed output to fit the 
  <span class="italic">compchem </span>convention 
  <span ext-link-type="uri" xlink:href="http://www.xml-cml.org/convention/compchem" class="ext-link" xmlns:xlink="http://www.w3.org/1999/xlink">http://www.xml-cml.org/convention/compchem</span>
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">This is carried out by a domain-specific declarative language which makes heavy use of XPath and a core set of Java routines for generic operations (delete/create/move elements, transform (matrix/molecule/strings etc.)). This approach means that failures are relatively silent (a strange document does not crash the process) and that changes can be made external to the software (by modifying the transformation files). As with the templates this should make it easier for the community to maintain the process (
  <span class="italic">e.g</span>. when new syntax or vocabulary occurs).
 </p>
 <p xmlns="http://www.w3.org/1999/xhtml">A typical template is shown in Appendix A.</p>
 <p xmlns="http://www.w3.org/1999/xhtml">JUMBO-Parser has been designed for portability, in that most of the instructions are declarative (XML). It still requires the JUMBO-Parser interpreter to be ported, but this is written in mainstream Java and should not be particularly problematic for most object-oriented targets such as Python, C++ and C#. To help in the parsing, there are a large number of unit and regression tests.</p>
</sec>
